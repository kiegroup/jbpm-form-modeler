/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jbpm.formModeler.core.processing.fieldHandlers.radio;

import java.util.Map;

import javax.inject.Named;

import org.jbpm.formModeler.api.model.Field;
import org.jbpm.formModeler.core.config.SelectValuesProvider;
import org.jbpm.formModeler.core.processing.fieldHandlers.InputTextFieldHandler;
import org.jbpm.formModeler.service.cdi.CDIBeanLocator;

@Named("org.jbpm.formModeler.core.processing.fieldHandlers.radio.RadioGroupFieldHandler")
public class RadioGroupFieldHandler extends InputTextFieldHandler {

    /**
     * Determine the list of class types this field can generate. That is,
     * normally, a field can generate multiple outputs (an input text can
     * generate Strings, Integers, ...)
     *
     * @return the set of class types that can be generated by this handler.
     */
    public String[] getCompatibleClassNames() {
        return new String[] { Object.class.getName(), String.class.getName() };
    }

    /**
     * Read a parameter value (normally from a request), and translate it to an
     * object with desired class (that must be one of the returned by this
     * handler)
     *
     * @return a object with desired class
     * @throws Exception
     */
    public Object getValue(Field field, String inputName, Map parametersMap, Map filesMap, String desiredClassName, Object previousValue) throws Exception {
        String[] paramValue = (String[]) parametersMap.get(inputName);
        if (paramValue == null || paramValue.length == 0)
            return null;
        SelectValuesProvider provider = (SelectValuesProvider) CDIBeanLocator.getBeanByNameOrType(field.getCustomFieldType());

        Map<String, Object> fieldRange = provider.getSelectOptions(field, previousValue, null, null);

        if ("".equals(paramValue[0]))
            return null;
        return fieldRange.get(paramValue[0]);
    }
}
